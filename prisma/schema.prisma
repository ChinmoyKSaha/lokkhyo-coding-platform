// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  password    String
  avatar      String?
  xp          Int      @default(0)
  level       Int      @default(1)
  streak      Int      @default(0)
  lastActive  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  submissions Submission[]
  progress    UserProgress[]
  
  @@map("users")
}

model Problem {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  description   String
  difficulty    Difficulty
  tags          String[]
  examples      Json
  constraints   String[]
  starterCode   Json
  solution      Json?
  testCases     Json
  acceptance    Float    @default(0)
  solved        Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  submissions   Submission[]
  
  @@map("problems")
}

model Submission {
  id          String      @id @default(cuid())
  userId      String
  problemId   String
  language    Language
  code        String
  status      SubmissionStatus
  runtime     Int?
  memory      Int?
  testsPassed Int         @default(0)
  totalTests  Int         @default(0)
  createdAt   DateTime    @default(now())

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem     Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  @@map("submissions")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  difficulty  Difficulty
  language    String
  modules     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  progress    UserProgress[]
  
  @@map("courses")
}

model UserProgress {
  id            String   @id @default(cuid())
  userId        String
  courseId      String?
  problemId     String?
  type          ProgressType
  completed     Boolean  @default(false)
  completedAt   DateTime?
  progress      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId, problemId, type])
  @@map("user_progress")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Language {
  JAVASCRIPT
  PYTHON
  JAVA
  CPP
  C
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

enum ProgressType {
  PROBLEM
  COURSE
  LESSON
}
